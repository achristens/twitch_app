{"ast":null,"code":"import _classCallCheck from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/abbychristens/www/react_modules/twitch_app/client/src/components/streams/StreamShow.js\";\nimport React, { Component } from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreamShow, _Component);\n\n  function StreamShow() {\n    _classCallCheck(this, StreamShow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).apply(this, arguments));\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    // constructor(props) {\n    //   super(props);\n    //\n    //   this.videoRef = React.createRef();\n    // }\n    value: function componentDidMount() {\n      var id = this.props.match.params.id.id;\n      this.props.fetchStream(id); // this.buildPlayer();\n    } // componentDidUpdate() {\n    // this.buildPlayer();\n    // }\n    //\n    // buildPlayer() {\n    //   if (this.player || !this.props.stream) {\n    //     return;\n    //   }\n    //   const { id }  = this.props.match.params.id;\n    //   this.player = flv.createPlayer({\n    //     type: 'flv',\n    //     url: `http://localhost:8000/live/${id}.flv`\n    //   });\n    //\n    //   this.player.attachMediaElement(this.videoRef.current);\n    //   this.player.load();\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description; // This destructuring helps to avoid 'this.props.stream' repetition in the JSX below\n      // BELOW:  writing \"controls\" is the same as writing controls={true}, this only applies to true not false\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/abbychristens/www/react_modules/twitch_app/client/src/components/streams/StreamShow.js"],"names":["React","Component","flv","connect","fetchStream","StreamShow","id","props","match","params","stream","title","description","videoRef","width","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;IAEMC,U;;;;;;;;;;;;;AACJ;AACA;AACA;AACA;AACA;wCAEmB;AAAA,UACTC,EADS,GACD,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EADvB,CACTA,EADS;AAEjB,WAAKC,KAAL,CAAWH,WAAX,CAAuBE,EAAvB,EAFiB,CAGjB;AACD,K,CAED;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BAEQ;AACN,UAAI,CAAC,KAAKC,KAAL,CAAWG,MAAhB,EAAuB;AACrB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AAHK,+BAKyB,KAAKH,KAAL,CAAWG,MALpC;AAAA,UAKEC,KALF,sBAKEA,KALF;AAAA,UAKSC,WALT,sBAKSA,WALT,EAK4C;AAElD;;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,GAAG,EAAE,KAAKC,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CAHF,CADF;AAOD;;;;EA9CsBX,S;;AAiDzB,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AAAEP,IAAAA,MAAM,EAAEM,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBH,EAApC;AAAV,GAAP;AACD,CAFD;;AAGA,eAAeH,OAAO,CAACY,eAAD,EAAkB;AAAEX,EAAAA,WAAW,EAAXA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends Component {\n  // constructor(props) {\n  //   super(props);\n  //\n  //   this.videoRef = React.createRef();\n  // }\n\n  componentDidMount(){\n    const { id }  = this.props.match.params.id;\n    this.props.fetchStream(id);\n    // this.buildPlayer();\n  }\n\n  // componentDidUpdate() {\n    // this.buildPlayer();\n  // }\n  //\n  // buildPlayer() {\n  //   if (this.player || !this.props.stream) {\n  //     return;\n  //   }\n  //   const { id }  = this.props.match.params.id;\n  //   this.player = flv.createPlayer({\n  //     type: 'flv',\n  //     url: `http://localhost:8000/live/${id}.flv`\n  //   });\n  //\n  //   this.player.attachMediaElement(this.videoRef.current);\n  //   this.player.load();\n  // }\n\n  render(){\n    if (!this.props.stream){\n      return <div>Loading...</div>\n    }\n\n    const { title, description } = this.props.stream; // This destructuring helps to avoid 'this.props.stream' repetition in the JSX below\n\n    // BELOW:  writing \"controls\" is the same as writing controls={true}, this only applies to true not false\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: '100%' }} controls />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id] }\n}\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}