{"ast":null,"code":"import _classCallCheck from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/abbychristens/www/react_modules/twitch_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/abbychristens/www/react_modules/twitch_app/client/src/components/streams/StreamShow.js\";\nimport React, { Component } from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreamShow, _Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id.id;\n      console.log(id);\n      this.props.fetchStream(id);\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildPlayer();\n    }\n  }, {\n    key: \"buildPlayer\",\n    value: function buildPlayer() {\n      if (this.player || !this.props.stream) {\n        return;\n      }\n\n      var id = this.props.match.params.id.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description; // This destructuring helps to avoid 'this.props.stream' repetition in the JSX below\n      // BELOW:  writing \"controls\" is the same as writing controls={true}, this only applies to true not false\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/abbychristens/www/react_modules/twitch_app/client/src/components/streams/StreamShow.js"],"names":["React","Component","flv","connect","fetchStream","StreamShow","props","videoRef","createRef","id","match","params","console","log","buildPlayer","player","stream","createPlayer","type","url","attachMediaElement","current","load","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;IAEMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AAEA,UAAKC,QAAL,GAAgBP,KAAK,CAACQ,SAAN,EAAhB;AAHiB;AAIlB;;;;wCAEkB;AAAA,UACTC,EADS,GACD,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBF,EADvB,CACTA,EADS;AAEjBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AACA,WAAKH,KAAL,CAAWF,WAAX,CAAuBK,EAAvB;AACA,WAAKK,WAAL;AACD;;;yCAEoB;AACnB,WAAKA,WAAL;AACD;;;kCAEa;AACZ,UAAI,KAAKC,MAAL,IAAe,CAAC,KAAKT,KAAL,CAAWU,MAA/B,EAAuC;AACrC;AACD;;AAHW,UAIJP,EAJI,GAII,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBF,EAJ5B,CAIJA,EAJI;AAKZ,WAAKM,MAAL,GAAcb,GAAG,CAACe,YAAJ,CAAiB;AAC7BC,QAAAA,IAAI,EAAE,KADuB;AAE7BC,QAAAA,GAAG,uCAAgCV,EAAhC;AAF0B,OAAjB,CAAd;AAKA,WAAKM,MAAL,CAAYK,kBAAZ,CAA+B,KAAKb,QAAL,CAAcc,OAA7C;AACA,WAAKN,MAAL,CAAYO,IAAZ;AACD;;;6BAEO;AACN,UAAI,CAAC,KAAKhB,KAAL,CAAWU,MAAhB,EAAuB;AACrB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AAHK,+BAKyB,KAAKV,KAAL,CAAWU,MALpC;AAAA,UAKEO,KALF,sBAKEA,KALF;AAAA,UAKSC,WALT,sBAKSA,WALT,EAK4C;AAElD;;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,GAAG,EAAE,KAAKjB,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEkB,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CAHF,CADF;AAOD;;;;EA/CsBvB,S;;AAkDzB,IAAMyB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AAAEZ,IAAAA,MAAM,EAAEW,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACD,CAFD;;AAGA,eAAeN,OAAO,CAACuB,eAAD,EAAkB;AAAEtB,EAAAA,WAAW,EAAXA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount(){\n    const { id }  = this.props.match.params.id;\n    console.log(id);\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n    const { id }  = this.props.match.params.id;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render(){\n    if (!this.props.stream){\n      return <div>Loading...</div>\n    }\n\n    const { title, description } = this.props.stream; // This destructuring helps to avoid 'this.props.stream' repetition in the JSX below\n\n    // BELOW:  writing \"controls\" is the same as writing controls={true}, this only applies to true not false\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: '100%' }} controls />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id] }\n}\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}